declare namespace java {
    namespace awt {
        namespace event {
            /**
             * An event which indicates that a keystroke occurred in a component.
             * <p>
             * This low-level event is generated by a component object (such as a text
             * field) when a key is pressed, released, or typed.
             * The event is passed to every <code>KeyListener</code>
             * or <code>KeyAdapter</code> object which registered to receive such
             * events using the component's <code>addKeyListener</code> method.
             * (<code>KeyAdapter</code> objects implement the
             * <code>KeyListener</code> interface.)  Each such listener object
             * gets this <code>KeyEvent</code> when the event occurs.
             * <p>
             * <em>"Key typed" events</em> are higher-level and generally do not depend on
             * the platform or keyboard layout.  They are generated when a Unicode character
             * is entered, and are the preferred way to find out about character input.
             * In the simplest case, a key typed event is produced by a single key press
             * (e.g., 'a').  Often, however, characters are produced by series of key
             * presses (e.g., 'shift' + 'a'), and the mapping from key pressed events to
             * key typed events may be many-to-one or many-to-many.  Key releases are not
             * usually necessary to generate a key typed event, but there are some cases
             * where the key typed event is not generated until a key is released (e.g.,
             * entering ASCII sequences via the Alt-Numpad method in Windows).
             * No key typed events are generated for keys that don't generate Unicode
             * characters (e.g., action keys, modifier keys, etc.).
             * <p>
             * The getKeyChar method always returns a valid Unicode character or
             * CHAR_UNDEFINED.  Character input is reported by KEY_TYPED events:
             * KEY_PRESSED and KEY_RELEASED events are not necessarily associated
             * with character input.  Therefore, the result of the getKeyChar method
             * is guaranteed to be meaningful only for KEY_TYPED events.
             * <p>
             * For key pressed and key released events, the getKeyCode method returns
             * the event's keyCode.  For key typed events, the getKeyCode method
             * always returns {@code VK_UNDEFINED}. The {@code getExtendedKeyCode} method
             * may also be used with many international keyboard layouts.
             * <p>
             * <em>"Key pressed" and "key released" events</em> are lower-level and depend
             * on the platform and keyboard layout. They are generated whenever a key is
             * pressed or released, and are the only way to find out about keys that don't
             * generate character input (e.g., action keys, modifier keys, etc.). The key
             * being pressed or released is indicated by the {@code getKeyCode} and {@code getExtendedKeyCode}
             * methods, which return a virtual key code.
             * <p>
             * <em>Virtual key codes</em> are used to report which keyboard key has
             * been pressed, rather than a character generated by the combination
             * of one or more keystrokes (such as "A", which comes from shift and "a").
             * <p>
             * For example, pressing the Shift key will cause a KEY_PRESSED event
             * with a VK_SHIFT keyCode, while pressing the 'a' key will result in
             * a VK_A keyCode.  After the 'a' key is released, a KEY_RELEASED event
             * will be fired with VK_A. Separately, a KEY_TYPED event with a keyChar
             * value of 'A' is generated.
             * <p>
             * Pressing and releasing a key on the keyboard results in the generating
             * the following key events (in order):
             * <PRE>
             * {@code KEY_PRESSED}
             * {@code KEY_TYPED} (is only generated if a valid Unicode character could be generated.)
             * {@code KEY_RELEASED}
             * </PRE>
             * But in some cases (e.g. auto-repeat or input method is activated) the order
             * could be different (and platform dependent).
             * <p>
             * Notes:
             * <ul>
             * <li>Key combinations which do not result in Unicode characters, such as action
             * keys like F1 and the HELP key, do not generate KEY_TYPED events.
             * <li>Not all keyboards or systems are capable of generating all
             * virtual key codes.  No attempt is made in Java to generate these keys
             * artificially.
             * <li>Virtual key codes do not identify a physical key: they depend on the
             * platform and keyboard layout. For example, the key that generates VK_Q
             * when using a U.S. keyboard layout will generate VK_A when using a French
             * keyboard layout.
             * <li>The key that generates {@code VK_Q} when using a U.S. keyboard layout also
             * generates a unique code for Russian or Hebrew layout. There is no a
             * {@code VK_} constant for these and many other codes in various layouts. These codes
             * may be obtained by using {@code getExtendedKeyCode} and are used whenever
             * a {@code VK_} constant is used.
             * <li>Not all characters have a keycode associated with them.  For example,
             * there is no keycode for the question mark because there is no keyboard
             * for which it appears on the primary layer.
             * <li>In order to support the platform-independent handling of action keys,
             * the Java platform uses a few additional virtual key constants for functions
             * that would otherwise have to be recognized by interpreting virtual key codes
             * and modifiers. For example, for Japanese Windows keyboards, VK_ALL_CANDIDATES
             * is returned instead of VK_CONVERT with the ALT modifier.
             * <li>As specified in <a href="../doc-files/FocusSpec.html">Focus Specification</a>
             * key events are dispatched to the focus owner by default.
             * </ul>
             * <p>
             * WARNING: Aside from those keys that are defined by the Java language
             * (VK_ENTER, VK_BACK_SPACE, and VK_TAB), do not rely on the values of the VK_
             * constants.  Sun reserves the right to change these values as needed
             * to accommodate a wider range of keyboards in the future.
             * <p>
             * An unspecified behavior will be caused if the {@code id} parameter
             * of any particular {@code KeyEvent} instance is not
             * in the range from {@code KEY_FIRST} to {@code KEY_LAST}.
             * @author Carl Quinn
             * @author Amy Fowler
             * @author Norbert Lindenberg
             * @see KeyAdapter
             * @see KeyListener
             * @see <a href="https://docs.oracle.com/javase/tutorial/uiswing/events/keylistener.html">Tutorial: Writing a Key Listener</a>
             * @since 1.1
             */
            // @ts-ignore
            class KeyEvent extends java.awt.event.InputEvent {
                /**
                 * Constructs a <code>KeyEvent</code> object.
                 * <p>This method throws an
                 * <code>IllegalArgumentException</code> if <code>source</code>
                 * is <code>null</code>.
                 * @param source    The <code>Component</code> that originated the event
                 * @param id              An integer indicating the type of event.
                 *                   For information on allowable values, see
                 *                   the class description for {#link KeyEvent}
                 * @param when      A long integer that specifies the time the event
                 *                   occurred.
                 *                      Passing negative or zero value
                 *                      is not recommended
                 * @param modifiers The modifier keys down during event (shift, ctrl,
                 *                   alt, meta).
                 *                      Passing negative value
                 *                      is not recommended.
                 *                      Zero value means that no modifiers were passed.
                 *                   Use either an extended _DOWN_MASK or old _MASK modifiers,
                 *                   however do not mix models in the one event.
                 *                   The extended modifiers are preferred for using
                 * @param keyCode   The integer code for an actual key, or VK_UNDEFINED
                 *                   (for a key-typed event)
                 * @param keyChar   The Unicode character generated by this event, or
                 *                   CHAR_UNDEFINED (for key-pressed and key-released
                 *                   events which do not map to a valid Unicode character)
                 * @param keyLocation  Identifies the key location.  The only legal
                 *         values are <code>KEY_LOCATION_UNKNOWN</code>,
                 *         <code>KEY_LOCATION_STANDARD</code>, <code>KEY_LOCATION_LEFT</code>,
                 *         <code>KEY_LOCATION_RIGHT</code>, and <code>KEY_LOCATION_NUMPAD</code>.
                 * @throws IllegalArgumentException
                 *      if <code>id</code> is <code>KEY_TYPED</code> and
                 *        <code>keyChar</code> is <code>CHAR_UNDEFINED</code>;
                 *      or if <code>id</code> is <code>KEY_TYPED</code> and
                 *        <code>keyCode</code> is not <code>VK_UNDEFINED</code>;
                 *      or if <code>id</code> is <code>KEY_TYPED</code> and
                 *        <code>keyLocation</code> is not <code>KEY_LOCATION_UNKNOWN</code>;
                 *      or if <code>keyLocation</code> is not one of the legal
                 *        values enumerated above.
                 * @throws IllegalArgumentException if <code>source</code> is null
                 * @see #getSource()
                 * @see #getID()
                 * @see #getWhen()
                 * @see #getModifiers()
                 * @see #getKeyCode()
                 * @see #getKeyChar()
                 * @see #getKeyLocation()
                 * @since 1.4
                 */
                // @ts-ignore
                constructor(source: java.awt.Component, id: number /*int*/, when: number /*long*/, modifiers: number /*int*/, keyCode: number /*int*/, keyChar: string, keyLocation: number /*int*/)
                /**
                 * Constructs a <code>KeyEvent</code> object.
                 * <p> This method throws an
                 * <code>IllegalArgumentException</code> if <code>source</code>
                 * is <code>null</code>.
                 * @param source    The <code>Component</code> that originated the event
                 * @param id              An integer indicating the type of event.
                 *                   For information on allowable values, see
                 *                   the class description for {#link KeyEvent}
                 * @param when      A long integer that specifies the time the event
                 *                   occurred.
                 *                      Passing negative or zero value
                 *                      is not recommended
                 * @param modifiers The modifier keys down during event (shift, ctrl,
                 *                   alt, meta).
                 *                      Passing negative value
                 *                      is not recommended.
                 *                      Zero value means that no modifiers were passed.
                 *                   Use either an extended _DOWN_MASK or old _MASK modifiers,
                 *                   however do not mix models in the one event.
                 *                   The extended modifiers are preferred for using
                 * @param keyCode   The integer code for an actual key, or VK_UNDEFINED
                 *                   (for a key-typed event)
                 * @param keyChar   The Unicode character generated by this event, or
                 *                   CHAR_UNDEFINED (for key-pressed and key-released
                 *                   events which do not map to a valid Unicode character)
                 * @throws IllegalArgumentException  if <code>id</code> is
                 *      <code>KEY_TYPED</code> and <code>keyChar</code> is
                 *      <code>CHAR_UNDEFINED</code>; or if <code>id</code> is
                 *      <code>KEY_TYPED</code> and <code>keyCode</code> is not
                 *      <code>VK_UNDEFINED</code>
                 * @throws IllegalArgumentException if <code>source</code> is null
                 * @see #getSource()
                 * @see #getID()
                 * @see #getWhen()
                 * @see #getModifiers()
                 * @see #getKeyCode()
                 * @see #getKeyChar()
                 */
                // @ts-ignore
                constructor(source: java.awt.Component, id: number /*int*/, when: number /*long*/, modifiers: number /*int*/, keyCode: number /*int*/, keyChar: string)
                /**
                 * @deprecated as of JDK1.1
                 */
                // @ts-ignore
                constructor(source: java.awt.Component, id: number /*int*/, when: number /*long*/, modifiers: number /*int*/, keyCode: number /*int*/)
                /**
                 * The first number in the range of ids used for key events.
                 */
                // @ts-ignore
                readonly KEY_FIRST: number /*int*/
                /**
                 * The last number in the range of ids used for key events.
                 */
                // @ts-ignore
                readonly KEY_LAST: number /*int*/
                /**
                 * The "key typed" event.  This event is generated when a character is
                 * entered.  In the simplest case, it is produced by a single key press.
                 * Often, however, characters are produced by series of key presses, and
                 * the mapping from key pressed events to key typed events may be
                 * many-to-one or many-to-many.
                 */
                // @ts-ignore
                readonly KEY_TYPED: number /*int*/
                /**
                 * The "key pressed" event. This event is generated when a key
                 * is pushed down.
                 */
                // @ts-ignore
                readonly KEY_PRESSED: number /*int*/
                /**
                 * The "key released" event. This event is generated when a key
                 * is let up.
                 */
                // @ts-ignore
                readonly KEY_RELEASED: number /*int*/
                // @ts-ignore
                readonly VK_ENTER: number /*int*/
                // @ts-ignore
                readonly VK_BACK_SPACE: number /*int*/
                // @ts-ignore
                readonly VK_TAB: number /*int*/
                // @ts-ignore
                readonly VK_CANCEL: number /*int*/
                // @ts-ignore
                readonly VK_CLEAR: number /*int*/
                // @ts-ignore
                readonly VK_SHIFT: number /*int*/
                // @ts-ignore
                readonly VK_CONTROL: number /*int*/
                // @ts-ignore
                readonly VK_ALT: number /*int*/
                // @ts-ignore
                readonly VK_PAUSE: number /*int*/
                // @ts-ignore
                readonly VK_CAPS_LOCK: number /*int*/
                // @ts-ignore
                readonly VK_ESCAPE: number /*int*/
                // @ts-ignore
                readonly VK_SPACE: number /*int*/
                // @ts-ignore
                readonly VK_PAGE_UP: number /*int*/
                // @ts-ignore
                readonly VK_PAGE_DOWN: number /*int*/
                // @ts-ignore
                readonly VK_END: number /*int*/
                // @ts-ignore
                readonly VK_HOME: number /*int*/
                /**
                 * Constant for the non-numpad <b>left</b> arrow key.
                 * @see #VK_KP_LEFT
                 */
                // @ts-ignore
                readonly VK_LEFT: number /*int*/
                /**
                 * Constant for the non-numpad <b>up</b> arrow key.
                 * @see #VK_KP_UP
                 */
                // @ts-ignore
                readonly VK_UP: number /*int*/
                /**
                 * Constant for the non-numpad <b>right</b> arrow key.
                 * @see #VK_KP_RIGHT
                 */
                // @ts-ignore
                readonly VK_RIGHT: number /*int*/
                /**
                 * Constant for the non-numpad <b>down</b> arrow key.
                 * @see #VK_KP_DOWN
                 */
                // @ts-ignore
                readonly VK_DOWN: number /*int*/
                /**
                 * Constant for the comma key, ","
                 */
                // @ts-ignore
                readonly VK_COMMA: number /*int*/
                /**
                 * Constant for the minus key, "-"
                 * @since 1.2
                 */
                // @ts-ignore
                readonly VK_MINUS: number /*int*/
                /**
                 * Constant for the period key, "."
                 */
                // @ts-ignore
                readonly VK_PERIOD: number /*int*/
                /**
                 * Constant for the forward slash key, "/"
                 */
                // @ts-ignore
                readonly VK_SLASH: number /*int*/
                /**
                 * VK_0 thru VK_9 are the same as ASCII '0' thru '9' (0x30 - 0x39)
                 */
                // @ts-ignore
                readonly VK_0: number /*int*/
                // @ts-ignore
                readonly VK_1: number /*int*/
                // @ts-ignore
                readonly VK_2: number /*int*/
                // @ts-ignore
                readonly VK_3: number /*int*/
                // @ts-ignore
                readonly VK_4: number /*int*/
                // @ts-ignore
                readonly VK_5: number /*int*/
                // @ts-ignore
                readonly VK_6: number /*int*/
                // @ts-ignore
                readonly VK_7: number /*int*/
                // @ts-ignore
                readonly VK_8: number /*int*/
                // @ts-ignore
                readonly VK_9: number /*int*/
                /**
                 * Constant for the semicolon key, ";"
                 */
                // @ts-ignore
                readonly VK_SEMICOLON: number /*int*/
                /**
                 * Constant for the equals key, "="
                 */
                // @ts-ignore
                readonly VK_EQUALS: number /*int*/
                /**
                 * VK_A thru VK_Z are the same as ASCII 'A' thru 'Z' (0x41 - 0x5A)
                 */
                // @ts-ignore
                readonly VK_A: number /*int*/
                // @ts-ignore
                readonly VK_B: number /*int*/
                // @ts-ignore
                readonly VK_C: number /*int*/
                // @ts-ignore
                readonly VK_D: number /*int*/
                // @ts-ignore
                readonly VK_E: number /*int*/
                // @ts-ignore
                readonly VK_F: number /*int*/
                // @ts-ignore
                readonly VK_G: number /*int*/
                // @ts-ignore
                readonly VK_H: number /*int*/
                // @ts-ignore
                readonly VK_I: number /*int*/
                // @ts-ignore
                readonly VK_J: number /*int*/
                // @ts-ignore
                readonly VK_K: number /*int*/
                // @ts-ignore
                readonly VK_L: number /*int*/
                // @ts-ignore
                readonly VK_M: number /*int*/
                // @ts-ignore
                readonly VK_N: number /*int*/
                // @ts-ignore
                readonly VK_O: number /*int*/
                // @ts-ignore
                readonly VK_P: number /*int*/
                // @ts-ignore
                readonly VK_Q: number /*int*/
                // @ts-ignore
                readonly VK_R: number /*int*/
                // @ts-ignore
                readonly VK_S: number /*int*/
                // @ts-ignore
                readonly VK_T: number /*int*/
                // @ts-ignore
                readonly VK_U: number /*int*/
                // @ts-ignore
                readonly VK_V: number /*int*/
                // @ts-ignore
                readonly VK_W: number /*int*/
                // @ts-ignore
                readonly VK_X: number /*int*/
                // @ts-ignore
                readonly VK_Y: number /*int*/
                // @ts-ignore
                readonly VK_Z: number /*int*/
                /**
                 * Constant for the open bracket key, "["
                 */
                // @ts-ignore
                readonly VK_OPEN_BRACKET: number /*int*/
                /**
                 * Constant for the back slash key, "\"
                 */
                // @ts-ignore
                readonly VK_BACK_SLASH: number /*int*/
                /**
                 * Constant for the close bracket key, "]"
                 */
                // @ts-ignore
                readonly VK_CLOSE_BRACKET: number /*int*/
                // @ts-ignore
                readonly VK_NUMPAD0: number /*int*/
                // @ts-ignore
                readonly VK_NUMPAD1: number /*int*/
                // @ts-ignore
                readonly VK_NUMPAD2: number /*int*/
                // @ts-ignore
                readonly VK_NUMPAD3: number /*int*/
                // @ts-ignore
                readonly VK_NUMPAD4: number /*int*/
                // @ts-ignore
                readonly VK_NUMPAD5: number /*int*/
                // @ts-ignore
                readonly VK_NUMPAD6: number /*int*/
                // @ts-ignore
                readonly VK_NUMPAD7: number /*int*/
                // @ts-ignore
                readonly VK_NUMPAD8: number /*int*/
                // @ts-ignore
                readonly VK_NUMPAD9: number /*int*/
                // @ts-ignore
                readonly VK_MULTIPLY: number /*int*/
                // @ts-ignore
                readonly VK_ADD: number /*int*/
                /**
                 * This constant is obsolete, and is included only for backwards
                 * compatibility.
                 * @see #VK_SEPARATOR
                 */
                // @ts-ignore
                readonly VK_SEPARATER: number /*int*/
                /**
                 * Constant for the Numpad Separator key.
                 * @since 1.4
                 */
                // @ts-ignore
                readonly VK_SEPARATOR: number /*int*/
                // @ts-ignore
                readonly VK_SUBTRACT: number /*int*/
                // @ts-ignore
                readonly VK_DECIMAL: number /*int*/
                // @ts-ignore
                readonly VK_DIVIDE: number /*int*/
                // @ts-ignore
                readonly VK_DELETE: number /*int*/
                // @ts-ignore
                readonly VK_NUM_LOCK: number /*int*/
                // @ts-ignore
                readonly VK_SCROLL_LOCK: number /*int*/
                /**
                 * Constant for the F1 function key.
                 */
                // @ts-ignore
                readonly VK_F1: number /*int*/
                /**
                 * Constant for the F2 function key.
                 */
                // @ts-ignore
                readonly VK_F2: number /*int*/
                /**
                 * Constant for the F3 function key.
                 */
                // @ts-ignore
                readonly VK_F3: number /*int*/
                /**
                 * Constant for the F4 function key.
                 */
                // @ts-ignore
                readonly VK_F4: number /*int*/
                /**
                 * Constant for the F5 function key.
                 */
                // @ts-ignore
                readonly VK_F5: number /*int*/
                /**
                 * Constant for the F6 function key.
                 */
                // @ts-ignore
                readonly VK_F6: number /*int*/
                /**
                 * Constant for the F7 function key.
                 */
                // @ts-ignore
                readonly VK_F7: number /*int*/
                /**
                 * Constant for the F8 function key.
                 */
                // @ts-ignore
                readonly VK_F8: number /*int*/
                /**
                 * Constant for the F9 function key.
                 */
                // @ts-ignore
                readonly VK_F9: number /*int*/
                /**
                 * Constant for the F10 function key.
                 */
                // @ts-ignore
                readonly VK_F10: number /*int*/
                /**
                 * Constant for the F11 function key.
                 */
                // @ts-ignore
                readonly VK_F11: number /*int*/
                /**
                 * Constant for the F12 function key.
                 */
                // @ts-ignore
                readonly VK_F12: number /*int*/
                /**
                 * Constant for the F13 function key.
                 * @since 1.2
                 */
                // @ts-ignore
                readonly VK_F13: number /*int*/
                /**
                 * Constant for the F14 function key.
                 * @since 1.2
                 */
                // @ts-ignore
                readonly VK_F14: number /*int*/
                /**
                 * Constant for the F15 function key.
                 * @since 1.2
                 */
                // @ts-ignore
                readonly VK_F15: number /*int*/
                /**
                 * Constant for the F16 function key.
                 * @since 1.2
                 */
                // @ts-ignore
                readonly VK_F16: number /*int*/
                /**
                 * Constant for the F17 function key.
                 * @since 1.2
                 */
                // @ts-ignore
                readonly VK_F17: number /*int*/
                /**
                 * Constant for the F18 function key.
                 * @since 1.2
                 */
                // @ts-ignore
                readonly VK_F18: number /*int*/
                /**
                 * Constant for the F19 function key.
                 * @since 1.2
                 */
                // @ts-ignore
                readonly VK_F19: number /*int*/
                /**
                 * Constant for the F20 function key.
                 * @since 1.2
                 */
                // @ts-ignore
                readonly VK_F20: number /*int*/
                /**
                 * Constant for the F21 function key.
                 * @since 1.2
                 */
                // @ts-ignore
                readonly VK_F21: number /*int*/
                /**
                 * Constant for the F22 function key.
                 * @since 1.2
                 */
                // @ts-ignore
                readonly VK_F22: number /*int*/
                /**
                 * Constant for the F23 function key.
                 * @since 1.2
                 */
                // @ts-ignore
                readonly VK_F23: number /*int*/
                /**
                 * Constant for the F24 function key.
                 * @since 1.2
                 */
                // @ts-ignore
                readonly VK_F24: number /*int*/
                // @ts-ignore
                readonly VK_PRINTSCREEN: number /*int*/
                // @ts-ignore
                readonly VK_INSERT: number /*int*/
                // @ts-ignore
                readonly VK_HELP: number /*int*/
                // @ts-ignore
                readonly VK_META: number /*int*/
                // @ts-ignore
                readonly VK_BACK_QUOTE: number /*int*/
                // @ts-ignore
                readonly VK_QUOTE: number /*int*/
                /**
                 * Constant for the numeric keypad <b>up</b> arrow key.
                 * @see #VK_UP
                 * @since 1.2
                 */
                // @ts-ignore
                readonly VK_KP_UP: number /*int*/
                /**
                 * Constant for the numeric keypad <b>down</b> arrow key.
                 * @see #VK_DOWN
                 * @since 1.2
                 */
                // @ts-ignore
                readonly VK_KP_DOWN: number /*int*/
                /**
                 * Constant for the numeric keypad <b>left</b> arrow key.
                 * @see #VK_LEFT
                 * @since 1.2
                 */
                // @ts-ignore
                readonly VK_KP_LEFT: number /*int*/
                /**
                 * Constant for the numeric keypad <b>right</b> arrow key.
                 * @see #VK_RIGHT
                 * @since 1.2
                 */
                // @ts-ignore
                readonly VK_KP_RIGHT: number /*int*/
                /**
                 * @since 1.2
                 */
                // @ts-ignore
                readonly VK_DEAD_GRAVE: number /*int*/
                /**
                 * @since 1.2
                 */
                // @ts-ignore
                readonly VK_DEAD_ACUTE: number /*int*/
                /**
                 * @since 1.2
                 */
                // @ts-ignore
                readonly VK_DEAD_CIRCUMFLEX: number /*int*/
                /**
                 * @since 1.2
                 */
                // @ts-ignore
                readonly VK_DEAD_TILDE: number /*int*/
                /**
                 * @since 1.2
                 */
                // @ts-ignore
                readonly VK_DEAD_MACRON: number /*int*/
                /**
                 * @since 1.2
                 */
                // @ts-ignore
                readonly VK_DEAD_BREVE: number /*int*/
                /**
                 * @since 1.2
                 */
                // @ts-ignore
                readonly VK_DEAD_ABOVEDOT: number /*int*/
                /**
                 * @since 1.2
                 */
                // @ts-ignore
                readonly VK_DEAD_DIAERESIS: number /*int*/
                /**
                 * @since 1.2
                 */
                // @ts-ignore
                readonly VK_DEAD_ABOVERING: number /*int*/
                /**
                 * @since 1.2
                 */
                // @ts-ignore
                readonly VK_DEAD_DOUBLEACUTE: number /*int*/
                /**
                 * @since 1.2
                 */
                // @ts-ignore
                readonly VK_DEAD_CARON: number /*int*/
                /**
                 * @since 1.2
                 */
                // @ts-ignore
                readonly VK_DEAD_CEDILLA: number /*int*/
                /**
                 * @since 1.2
                 */
                // @ts-ignore
                readonly VK_DEAD_OGONEK: number /*int*/
                /**
                 * @since 1.2
                 */
                // @ts-ignore
                readonly VK_DEAD_IOTA: number /*int*/
                /**
                 * @since 1.2
                 */
                // @ts-ignore
                readonly VK_DEAD_VOICED_SOUND: number /*int*/
                /**
                 * @since 1.2
                 */
                // @ts-ignore
                readonly VK_DEAD_SEMIVOICED_SOUND: number /*int*/
                /**
                 * @since 1.2
                 */
                // @ts-ignore
                readonly VK_AMPERSAND: number /*int*/
                /**
                 * @since 1.2
                 */
                // @ts-ignore
                readonly VK_ASTERISK: number /*int*/
                /**
                 * @since 1.2
                 */
                // @ts-ignore
                readonly VK_QUOTEDBL: number /*int*/
                /**
                 * @since 1.2
                 */
                // @ts-ignore
                readonly VK_LESS: number /*int*/
                /**
                 * @since 1.2
                 */
                // @ts-ignore
                readonly VK_GREATER: number /*int*/
                /**
                 * @since 1.2
                 */
                // @ts-ignore
                readonly VK_BRACELEFT: number /*int*/
                /**
                 * @since 1.2
                 */
                // @ts-ignore
                readonly VK_BRACERIGHT: number /*int*/
                /**
                 * Constant for the "@" key.
                 * @since 1.2
                 */
                // @ts-ignore
                readonly VK_AT: number /*int*/
                /**
                 * Constant for the ":" key.
                 * @since 1.2
                 */
                // @ts-ignore
                readonly VK_COLON: number /*int*/
                /**
                 * Constant for the "^" key.
                 * @since 1.2
                 */
                // @ts-ignore
                readonly VK_CIRCUMFLEX: number /*int*/
                /**
                 * Constant for the "$" key.
                 * @since 1.2
                 */
                // @ts-ignore
                readonly VK_DOLLAR: number /*int*/
                /**
                 * Constant for the Euro currency sign key.
                 * @since 1.2
                 */
                // @ts-ignore
                readonly VK_EURO_SIGN: number /*int*/
                /**
                 * Constant for the "!" key.
                 * @since 1.2
                 */
                // @ts-ignore
                readonly VK_EXCLAMATION_MARK: number /*int*/
                /**
                 * Constant for the inverted exclamation mark key.
                 * @since 1.2
                 */
                // @ts-ignore
                readonly VK_INVERTED_EXCLAMATION_MARK: number /*int*/
                /**
                 * Constant for the "(" key.
                 * @since 1.2
                 */
                // @ts-ignore
                readonly VK_LEFT_PARENTHESIS: number /*int*/
                /**
                 * Constant for the "#" key.
                 * @since 1.2
                 */
                // @ts-ignore
                readonly VK_NUMBER_SIGN: number /*int*/
                /**
                 * Constant for the "+" key.
                 * @since 1.2
                 */
                // @ts-ignore
                readonly VK_PLUS: number /*int*/
                /**
                 * Constant for the ")" key.
                 * @since 1.2
                 */
                // @ts-ignore
                readonly VK_RIGHT_PARENTHESIS: number /*int*/
                /**
                 * Constant for the "_" key.
                 * @since 1.2
                 */
                // @ts-ignore
                readonly VK_UNDERSCORE: number /*int*/
                /**
                 * Constant for the Microsoft Windows "Windows" key.
                 * It is used for both the left and right version of the key.
                 * @see #getKeyLocation()
                 * @since 1.5
                 */
                // @ts-ignore
                readonly VK_WINDOWS: number /*int*/
                /**
                 * Constant for the Microsoft Windows Context Menu key.
                 * @since 1.5
                 */
                // @ts-ignore
                readonly VK_CONTEXT_MENU: number /*int*/
                // @ts-ignore
                readonly VK_FINAL: number /*int*/
                /**
                 * Constant for the Convert function key.
                 */
                // @ts-ignore
                readonly VK_CONVERT: number /*int*/
                /**
                 * Constant for the Don't Convert function key.
                 */
                // @ts-ignore
                readonly VK_NONCONVERT: number /*int*/
                /**
                 * Constant for the Accept or Commit function key.
                 */
                // @ts-ignore
                readonly VK_ACCEPT: number /*int*/
                // @ts-ignore
                readonly VK_MODECHANGE: number /*int*/
                // @ts-ignore
                readonly VK_KANA: number /*int*/
                // @ts-ignore
                readonly VK_KANJI: number /*int*/
                /**
                 * Constant for the Alphanumeric function key.
                 * @since 1.2
                 */
                // @ts-ignore
                readonly VK_ALPHANUMERIC: number /*int*/
                /**
                 * Constant for the Katakana function key.
                 * @since 1.2
                 */
                // @ts-ignore
                readonly VK_KATAKANA: number /*int*/
                /**
                 * Constant for the Hiragana function key.
                 * @since 1.2
                 */
                // @ts-ignore
                readonly VK_HIRAGANA: number /*int*/
                /**
                 * Constant for the Full-Width Characters function key.
                 * @since 1.2
                 */
                // @ts-ignore
                readonly VK_FULL_WIDTH: number /*int*/
                /**
                 * Constant for the Half-Width Characters function key.
                 * @since 1.2
                 */
                // @ts-ignore
                readonly VK_HALF_WIDTH: number /*int*/
                /**
                 * Constant for the Roman Characters function key.
                 * @since 1.2
                 */
                // @ts-ignore
                readonly VK_ROMAN_CHARACTERS: number /*int*/
                /**
                 * Constant for the All Candidates function key.
                 * @since 1.2
                 */
                // @ts-ignore
                readonly VK_ALL_CANDIDATES: number /*int*/
                /**
                 * Constant for the Previous Candidate function key.
                 * @since 1.2
                 */
                // @ts-ignore
                readonly VK_PREVIOUS_CANDIDATE: number /*int*/
                /**
                 * Constant for the Code Input function key.
                 * @since 1.2
                 */
                // @ts-ignore
                readonly VK_CODE_INPUT: number /*int*/
                /**
                 * Constant for the Japanese-Katakana function key.
                 * This key switches to a Japanese input method and selects its Katakana input mode.
                 * @since 1.2
                 */
                // @ts-ignore
                readonly VK_JAPANESE_KATAKANA: number /*int*/
                /**
                 * Constant for the Japanese-Hiragana function key.
                 * This key switches to a Japanese input method and selects its Hiragana input mode.
                 * @since 1.2
                 */
                // @ts-ignore
                readonly VK_JAPANESE_HIRAGANA: number /*int*/
                /**
                 * Constant for the Japanese-Roman function key.
                 * This key switches to a Japanese input method and selects its Roman-Direct input mode.
                 * @since 1.2
                 */
                // @ts-ignore
                readonly VK_JAPANESE_ROMAN: number /*int*/
                /**
                 * Constant for the locking Kana function key.
                 * This key locks the keyboard into a Kana layout.
                 * @since 1.3
                 */
                // @ts-ignore
                readonly VK_KANA_LOCK: number /*int*/
                /**
                 * Constant for the input method on/off key.
                 * @since 1.3
                 */
                // @ts-ignore
                readonly VK_INPUT_METHOD_ON_OFF: number /*int*/
                /**
                 * @since 1.2
                 */
                // @ts-ignore
                readonly VK_CUT: number /*int*/
                /**
                 * @since 1.2
                 */
                // @ts-ignore
                readonly VK_COPY: number /*int*/
                /**
                 * @since 1.2
                 */
                // @ts-ignore
                readonly VK_PASTE: number /*int*/
                /**
                 * @since 1.2
                 */
                // @ts-ignore
                readonly VK_UNDO: number /*int*/
                /**
                 * @since 1.2
                 */
                // @ts-ignore
                readonly VK_AGAIN: number /*int*/
                /**
                 * @since 1.2
                 */
                // @ts-ignore
                readonly VK_FIND: number /*int*/
                /**
                 * @since 1.2
                 */
                // @ts-ignore
                readonly VK_PROPS: number /*int*/
                /**
                 * @since 1.2
                 */
                // @ts-ignore
                readonly VK_STOP: number /*int*/
                /**
                 * Constant for the Compose function key.
                 * @since 1.2
                 */
                // @ts-ignore
                readonly VK_COMPOSE: number /*int*/
                /**
                 * Constant for the AltGraph function key.
                 * @since 1.2
                 */
                // @ts-ignore
                readonly VK_ALT_GRAPH: number /*int*/
                /**
                 * Constant for the Begin key.
                 * @since 1.5
                 */
                // @ts-ignore
                readonly VK_BEGIN: number /*int*/
                /**
                 * This value is used to indicate that the keyCode is unknown.
                 * KEY_TYPED events do not have a keyCode value; this value
                 * is used instead.
                 */
                // @ts-ignore
                readonly VK_UNDEFINED: number /*int*/
                /**
                 * KEY_PRESSED and KEY_RELEASED events which do not map to a
                 * valid Unicode character use this for the keyChar value.
                 */
                // @ts-ignore
                readonly CHAR_UNDEFINED: string
                /**
                 * A constant indicating that the keyLocation is indeterminate
                 * or not relevant.
                 * <code>KEY_TYPED</code> events do not have a keyLocation; this value
                 * is used instead.
                 * @since 1.4
                 */
                // @ts-ignore
                readonly KEY_LOCATION_UNKNOWN: number /*int*/
                /**
                 * A constant indicating that the key pressed or released
                 * is not distinguished as the left or right version of a key,
                 * and did not originate on the numeric keypad (or did not
                 * originate with a virtual key corresponding to the numeric
                 * keypad).
                 * @since 1.4
                 */
                // @ts-ignore
                readonly KEY_LOCATION_STANDARD: number /*int*/
                /**
                 * A constant indicating that the key pressed or released is in
                 * the left key location (there is more than one possible location
                 * for this key).  Example: the left shift key.
                 * @since 1.4
                 */
                // @ts-ignore
                readonly KEY_LOCATION_LEFT: number /*int*/
                /**
                 * A constant indicating that the key pressed or released is in
                 * the right key location (there is more than one possible location
                 * for this key).  Example: the right shift key.
                 * @since 1.4
                 */
                // @ts-ignore
                readonly KEY_LOCATION_RIGHT: number /*int*/
                /**
                 * A constant indicating that the key event originated on the
                 * numeric keypad or with a virtual key corresponding to the
                 * numeric keypad.
                 * @since 1.4
                 */
                // @ts-ignore
                readonly KEY_LOCATION_NUMPAD: number /*int*/
                /**
                 * Returns the integer keyCode associated with the key in this event.
                 * @return the integer code for an actual key on the keyboard.
                 *          (For <code>KEY_TYPED</code> events, the keyCode is
                 *          <code>VK_UNDEFINED</code>.)
                 */
                // @ts-ignore
                getKeyCode(): int
                /**
                 * Set the keyCode value to indicate a physical key.
                 * @param keyCode an integer corresponding to an actual key on the keyboard.
                 */
                // @ts-ignore
                setKeyCode(keyCode: number /*int*/): void
                /**
                 * Returns the character associated with the key in this event.
                 * For example, the <code>KEY_TYPED</code> event for shift + "a"
                 * returns the value for "A".
                 * <p>
                 * <code>KEY_PRESSED</code> and <code>KEY_RELEASED</code> events
                 * are not intended for reporting of character input.  Therefore,
                 * the values returned by this method are guaranteed to be
                 * meaningful only for <code>KEY_TYPED</code> events.
                 * @return the Unicode character defined for this key event.
                 *          If no valid Unicode character exists for this key event,
                 *          <code>CHAR_UNDEFINED</code> is returned.
                 */
                // @ts-ignore
                getKeyChar(): char
                /**
                 * Set the keyChar value to indicate a logical character.
                 * @param keyChar a char corresponding to to the combination of keystrokes
                 *                 that make up this event.
                 */
                // @ts-ignore
                setKeyChar(keyChar: string): void
                /**
                 * Set the modifiers to indicate additional keys that were held down
                 * (e.g. shift, ctrl, alt, meta) defined as part of InputEvent.
                 * <p>
                 * NOTE:  use of this method is not recommended, because many AWT
                 * implementations do not recognize modifier changes.  This is
                 * especially true for <code>KEY_TYPED</code> events where the shift
                 * modifier is changed.
                 * @param modifiers an integer combination of the modifier constants.
                 * @see InputEvent
                 * @deprecated as of JDK1.1.4
                 */
                // @ts-ignore
                setModifiers(modifiers: number /*int*/): void
                /**
                 * Returns the location of the key that originated this key event.
                 * Some keys occur more than once on a keyboard, e.g. the left and
                 * right shift keys.  Additionally, some keys occur on the numeric
                 * keypad.  This provides a way of distinguishing such keys.
                 * @return the location of the key that was pressed or released.
                 *          Always returns <code>KEY_LOCATION_UNKNOWN</code> for
                 *          <code>KEY_TYPED</code> events.
                 * @since 1.4
                 */
                // @ts-ignore
                getKeyLocation(): int
                /**
                 * Returns a String describing the keyCode, such as "HOME", "F1" or "A".
                 * These strings can be localized by changing the awt.properties file.
                 * @return a string containing a text description for a physical key,
                 *          identified by its keyCode
                 */
                // @ts-ignore
                getKeyText(keyCode: number /*int*/): java.lang.String
                /**
                 * Returns a <code>String</code> describing the modifier key(s),
                 * such as "Shift", or "Ctrl+Shift".  These strings can be
                 * localized by changing the <code>awt.properties</code> file.
                 * <p>
                 * Note that <code>InputEvent.ALT_MASK</code> and
                 * <code>InputEvent.BUTTON2_MASK</code> have the same value,
                 * so the string "Alt" is returned for both modifiers.  Likewise,
                 * <code>InputEvent.META_MASK</code> and
                 * <code>InputEvent.BUTTON3_MASK</code> have the same value,
                 * so the string "Meta" is returned for both modifiers.
                 * @return string a text description of the combination of modifier
                 *                 keys that were held down during the event
                 * @see InputEvent#getModifiersExText(int)
                 */
                // @ts-ignore
                getKeyModifiersText(modifiers: number /*int*/): java.lang.String
                /**
                 * Returns whether the key in this event is an "action" key.
                 * Typically an action key does not fire a unicode character and is
                 * not a modifier key.
                 * @return <code>true</code> if the key is an "action" key,
                 *          <code>false</code> otherwise
                 */
                // @ts-ignore
                isActionKey(): boolean
                /**
                 * Returns a parameter string identifying this event.
                 * This method is useful for event logging and for debugging.
                 * @return a string identifying the event and its attributes
                 */
                // @ts-ignore
                paramString(): java.lang.String
                /**
                 * Returns an extended key code for the event.
                 * The extended key code is a unique id assigned to  a key on the keyboard
                 * just like {@code keyCode}. However, unlike {@code keyCode}, this value depends on the
                 * current keyboard layout. For instance, pressing the left topmost letter key
                 * in a common English layout produces the same value as {@code keyCode}, {@code VK_Q}.
                 * Pressing the same key in a regular Russian layout gives another code, unique for the
                 * letter "Cyrillic I short".
                 * @since 1.7
                 */
                // @ts-ignore
                getExtendedKeyCode(): int
                /**
                 * Returns an extended key code for a unicode character.
                 * @return for a unicode character with a corresponding {#code VK_} constant -- this
                 *    {@code VK_} constant; for a character appearing on the primary
                 *    level of a known keyboard layout -- a unique integer.
                 *    If a character does not appear on the primary level of a known keyboard,
                 *    {@code VK_UNDEFINED} is returned.
                 * @since 1.7
                 */
                // @ts-ignore
                getExtendedKeyCodeForChar(c: number /*int*/): int
            }
        }
    }
}
