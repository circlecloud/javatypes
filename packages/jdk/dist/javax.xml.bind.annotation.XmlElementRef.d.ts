declare namespace javax {
    namespace xml {
        namespace bind {
            namespace annotation {
                /**
                 * <p>
                 * Maps a JavaBean property to a XML element derived from property's type.
                 * <p>
                 * <b>Usage</b>
                 * <p>
                 * <tt>&#64;XmlElementRef</tt> annotation can be used with a
                 * JavaBean property or from within {@link XmlElementRefs}
                 * <p>
                 * This annotation dynamically associates an XML element name with the JavaBean
                 * property. When a JavaBean property is annotated with {@link
                 * XmlElement}, the XML element name is statically derived from the
                 * JavaBean property name. However, when this annotation is used, the
                 * XML element name is derived from the instance of the type of the
                 * JavaBean property at runtime.
                 * <h3> XML Schema substitution group support </h3>
                 * XML Schema allows a XML document author to use XML element names
                 * that were not statically specified in the content model of a
                 * schema using substitution groups. Schema derived code provides
                 * support for substitution groups using an <i>element property</i>,
                 * (section 5.5.5, "Element Property" of JAXB 2.0 specification). An
                 * element property method signature is of the form:
                 * <pre>
                 * public void setTerm(JAXBElement<? extends Operator>);
                 * public JAXBElement<? extends Operator> getTerm();
                 * </pre>
                 * <p>
                 * An element factory method annotated with  {@link XmlElementDecl} is
                 * used to create a <tt>JAXBElement</tt> instance, containing an XML
                 * element name. The presence of &#64;XmlElementRef annotation on an
                 * element property indicates that the element name from <tt>JAXBElement</tt>
                 * instance be used instead of deriving an XML element name from the
                 * JavaBean property name.
                 * <p>
                 * The usage is subject to the following constraints:
                 * <ul>
                 * <li> If the collection item type (for collection property) or
                 * property type (for single valued property) is
                 * {@link javax.xml.bind.JAXBElement}, then
                 * <tt>&#64;XmlElementRef}.name()</tt> and <tt>&#64;XmlElementRef.namespace()</tt> must
                 * point an element factory method  with an @XmlElementDecl
                 * annotation in a class annotated  with @XmlRegistry (usually
                 * ObjectFactory class generated by  the schema compiler) :
                 * <ul>
                 * <li> @XmlElementDecl.name() must equal @XmlElementRef.name()  </li>
                 * <li> @XmlElementDecl.namespace() must equal @XmlElementRef.namespace(). </li>
                 * </ul>
                 * </li>
                 * <li> If the collection item type (for collection property) or
                 * property type  (for single valued property) is not
                 * {@link javax.xml.bind.JAXBElement}, then the type referenced by the
                 * property or field must be annotated  with {@link XmlRootElement}. </li>
                 * <li> This annotation can be used with the following annotations:
                 * {@link XmlElementWrapper}, {@link XmlJavaTypeAdapter}.
                 * </ul>
                 * <p>See "Package Specification" in javax.xml.bind.package javadoc for
                 * additional common information.</p>
                 * <p><b>Example 1: Ant Task Example</b></p>
                 * The following Java class hierarchy models an Ant build
                 * script.  An Ant task corresponds to a class in the class
                 * hierarchy. The XML element name of an Ant task is indicated by the
                 * &#64;XmlRootElement annotation on its corresponding class.
                 * <pre>
                 * &#64;XmlRootElement(name="target")
                 * class Target {
                 * // The presence of &#64;XmlElementRef indicates that the XML
                 * // element name will be derived from the &#64;XmlRootElement
                 * // annotation on the type (for e.g. "jar" for JarTask).
                 * &#64;XmlElementRef
                 * List&lt;Task> tasks;
                 * }
                 * abstract class Task {
                 * }
                 * &#64;XmlRootElement(name="jar")
                 * class JarTask extends Task {
                 * ...
                 * }
                 * &#64;XmlRootElement(name="javac")
                 * class JavacTask extends Task {
                 * ...
                 * }
                 * &lt;!-- XML Schema fragment -->
                 * &lt;xs:element name="target" type="Target">
                 * &lt;xs:complexType name="Target">
                 * &lt;xs:sequence>
                 * &lt;xs:choice maxOccurs="unbounded">
                 * &lt;xs:element ref="jar">
                 * &lt;xs:element ref="javac">
                 * &lt;/xs:choice>
                 * &lt;/xs:sequence>
                 * &lt;/xs:complexType>
                 * </pre>
                 * <p>
                 * Thus the following code fragment:
                 * <pre>
                 * Target target = new Target();
                 * target.tasks.add(new JarTask());
                 * target.tasks.add(new JavacTask());
                 * marshal(target);
                 * </pre>
                 * will produce the following XML output:
                 * <pre>
                 * &lt;target>
                 * &lt;jar>
                 * ....
                 * &lt;/jar>
                 * &lt;javac>
                 * ....
                 * &lt;/javac>
                 * &lt;/target>
                 * </pre>
                 * <p>
                 * It is not an error to have a class that extends <tt>Task</tt>
                 * that doesn't have {@link XmlRootElement}. But they can't show up in an
                 * XML instance (because they don't have XML element names).
                 * <p><b>Example 2: XML Schema Susbstitution group support</b>
                 * <p> The following example shows the annotations for XML Schema
                 * substitution groups.  The annotations and the ObjectFactory are
                 * derived from the schema.
                 * <pre>
                 * &#64;XmlElement
                 * class Math {
                 * //  The value of {@link #type()}is
                 * //  JAXBElement.class , which indicates the XML
                 * //  element name ObjectFactory - in general a class marked
                 * //  with &#64;XmlRegistry. (See ObjectFactory below)
                 * //
                 * //  The {@link #name()} is "operator", a pointer to a
                 * // factory method annotated with a
                 * //  {@link XmlElementDecl} with the name "operator". Since
                 * //  "operator" is the head of a substitution group that
                 * //  contains elements "add" and "sub" elements, "operator"
                 * //  element can be substituted in an instance document by
                 * //  elements "add" or "sub". At runtime, JAXBElement
                 * //  instance contains the element name that has been
                 * //  substituted in the XML document.
                 * //
                 * &#64;XmlElementRef(type=JAXBElement.class,name="operator")
                 * JAXBElement&lt;? extends Operator> term;
                 * }
                 * &#64;XmlRegistry
                 * class ObjectFactory {
                 * &#64;XmlElementDecl(name="operator")
                 * JAXBElement&lt;Operator> createOperator(Operator o) {...}
                 * &#64;XmlElementDecl(name="add",substitutionHeadName="operator")
                 * JAXBElement&lt;Operator> createAdd(Operator o) {...}
                 * &#64;XmlElementDecl(name="sub",substitutionHeadName="operator")
                 * JAXBElement&lt;Operator> createSub(Operator o) {...}
                 * }
                 * class Operator {
                 * ...
                 * }
                 * </pre>
                 * <p>
                 * Thus, the following code fragment
                 * <pre>
                 * Math m = new Math();
                 * m.term = new ObjectFactory().createAdd(new Operator());
                 * marshal(m);
                 * </pre>
                 * will produce the following XML output:
                 * <pre>
                 * &lt;math>
                 * &lt;add>...&lt;/add>
                 * &lt;/math>
                 * </pre>
                 * @author <ul><li>Kohsuke Kawaguchi, Sun Microsystems,Inc. </li><li>Sekhar Vajjhala, Sun Microsystems, Inc.</li></ul>
                 * @see XmlElementRefs
                 * @since JAXB2.0
                 */
                // @ts-ignore
                class XmlElementRef implements java.lang.annotation.Annotation {
                }
            }
        }
    }
}
