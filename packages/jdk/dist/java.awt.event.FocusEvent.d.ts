declare namespace java {
    namespace awt {
        namespace event {
            /**
             * A low-level event which indicates that a Component has gained or lost the
             * input focus. This low-level event is generated by a Component (such as a
             * TextField). The event is passed to every <code>FocusListener</code> or
             * <code>FocusAdapter</code> object which registered to receive such events
             * using the Component's <code>addFocusListener</code> method. (<code>
             * FocusAdapter</code> objects implement the <code>FocusListener</code>
             * interface.) Each such listener object gets this <code>FocusEvent</code> when
             * the event occurs.
             * <p>
             * There are two levels of focus events: permanent and temporary. Permanent
             * focus change events occur when focus is directly moved from one Component to
             * another, such as through a call to requestFocus() or as the user uses the
             * TAB key to traverse Components. Temporary focus change events occur when
             * focus is temporarily lost for a Component as the indirect result of another
             * operation, such as Window deactivation or a Scrollbar drag. In this case,
             * the original focus state will automatically be restored once that operation
             * is finished, or, for the case of Window deactivation, when the Window is
             * reactivated. Both permanent and temporary focus events are delivered using
             * the FOCUS_GAINED and FOCUS_LOST event ids; the level may be distinguished in
             * the event using the isTemporary() method.
             * <p>
             * An unspecified behavior will be caused if the {@code id} parameter
             * of any particular {@code FocusEvent} instance is not
             * in the range from {@code FOCUS_FIRST} to {@code FOCUS_LAST}.
             * @see FocusAdapter
             * @see FocusListener
             * @see <a href="https://docs.oracle.com/javase/tutorial/uiswing/events/focuslistener.html">Tutorial: Writing a Focus Listener</a>
             * @author Carl Quinn
             * @author Amy Fowler
             * @since 1.1
             */
            // @ts-ignore
            class FocusEvent extends java.awt.event.ComponentEvent {
                /**
                 * Constructs a <code>FocusEvent</code> object with the
                 * specified temporary state and opposite <code>Component</code>.
                 * The opposite <code>Component</code> is the other
                 * <code>Component</code> involved in this focus change.
                 * For a <code>FOCUS_GAINED</code> event, this is the
                 * <code>Component</code> that lost focus. For a
                 * <code>FOCUS_LOST</code> event, this is the <code>Component</code>
                 * that gained focus. If this focus change occurs with a native
                 * application, with a Java application in a different VM,
                 * or with no other <code>Component</code>, then the opposite
                 * <code>Component</code> is <code>null</code>.
                 * <p> This method throws an
                 * <code>IllegalArgumentException</code> if <code>source</code>
                 * is <code>null</code>.
                 * @param source     The <code>Component</code> that originated the event
                 * @param id         An integer indicating the type of event.
                 *                      For information on allowable values, see
                 *                      the class description for {#link FocusEvent}
                 * @param temporary  Equals <code>true</code> if the focus change is temporary;
                 *                    <code>false</code> otherwise
                 * @param opposite   The other Component involved in the focus change,
                 *                    or <code>null</code>
                 * @throws IllegalArgumentException if <code>source</code> equals {#code null}
                 * @see #getSource()
                 * @see #getID()
                 * @see #isTemporary()
                 * @see #getOppositeComponent()
                 * @since 1.4
                 */
                // @ts-ignore
                constructor(source: java.awt.Component, id: number /*int*/, temporary: boolean, opposite: java.awt.Component)
                /**
                 * Constructs a <code>FocusEvent</code> object and identifies
                 * whether or not the change is temporary.
                 * <p> This method throws an
                 * <code>IllegalArgumentException</code> if <code>source</code>
                 * is <code>null</code>.
                 * @param source    The <code>Component</code> that originated the event
                 * @param id        An integer indicating the type of event.
                 *                      For information on allowable values, see
                 *                      the class description for {#link FocusEvent}
                 * @param temporary Equals <code>true</code> if the focus change is temporary;
                 *                   <code>false</code> otherwise
                 * @throws IllegalArgumentException if <code>source</code> equals {#code null}
                 * @see #getSource()
                 * @see #getID()
                 * @see #isTemporary()
                 */
                // @ts-ignore
                constructor(source: java.awt.Component, id: number /*int*/, temporary: boolean)
                /**
                 * Constructs a <code>FocusEvent</code> object and identifies it
                 * as a permanent change in focus.
                 * <p> This method throws an
                 * <code>IllegalArgumentException</code> if <code>source</code>
                 * is <code>null</code>.
                 * @param source    The <code>Component</code> that originated the event
                 * @param id        An integer indicating the type of event.
                 *                      For information on allowable values, see
                 *                      the class description for {#link FocusEvent}
                 * @throws IllegalArgumentException if <code>source</code> equals {#code null}
                 * @see #getSource()
                 * @see #getID()
                 */
                // @ts-ignore
                constructor(source: java.awt.Component, id: number /*int*/)
                /**
                 * The first number in the range of ids used for focus events.
                 */
                // @ts-ignore
                readonly FOCUS_FIRST: number /*int*/
                /**
                 * The last number in the range of ids used for focus events.
                 */
                // @ts-ignore
                readonly FOCUS_LAST: number /*int*/
                /**
                 * This event indicates that the Component is now the focus owner.
                 */
                // @ts-ignore
                readonly FOCUS_GAINED: number /*int*/
                /**
                 * This event indicates that the Component is no longer the focus owner.
                 */
                // @ts-ignore
                readonly FOCUS_LOST: number /*int*/
                /**
                 * Identifies the focus change event as temporary or permanent.
                 * @return <code>true</code> if the focus change is temporary;
                 *          <code>false</code> otherwise
                 */
                // @ts-ignore
                isTemporary(): boolean
                /**
                 * Returns the other Component involved in this focus change. For a
                 * FOCUS_GAINED event, this is the Component that lost focus. For a
                 * FOCUS_LOST event, this is the Component that gained focus. If this
                 * focus change occurs with a native application, with a Java application
                 * in a different VM or context, or with no other Component, then null is
                 * returned.
                 * @return the other Component involved in the focus change, or null
                 * @since 1.4
                 */
                // @ts-ignore
                getOppositeComponent(): java.awt.Component
                /**
                 * Returns a parameter string identifying this event.
                 * This method is useful for event-logging and for debugging.
                 * @return a string identifying the event and its attributes
                 */
                // @ts-ignore
                paramString(): java.lang.String
            }
        }
    }
}
