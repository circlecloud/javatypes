declare namespace javax {
    namespace sound {
        namespace sampled {
            /**
             * The <code>LineEvent</code> class encapsulates information that a line
             * sends its listeners whenever the line opens, closes, starts, or stops.
             * Each of these four state changes is represented by a corresponding
             * type of event.  A listener receives the event as a parameter to its
             * {@link LineListener#update update} method.  By querying the event,
             * the listener can learn the type of event, the line responsible for
             * the event, and how much data the line had processed when the event occurred.
             * <p>Although this class implements Serializable, attempts to
             * serialize a <code>LineEvent</code> object will fail.
             * @author Kara Kytle
             * @see Line
             * @see LineListener#update
             * @since 1.3
             * @serial exclude
             */
            // @ts-ignore
            class LineEvent extends java.util.EventObject {
                /**
                 * Constructs a new event of the specified type, originating from the specified line.
                 * @param line the source of this event
                 * @param type the event type (<code>OPEN</code>, <code>CLOSE</code>, <code>START</code>, or <code>STOP</code>)
                 * @param position the number of sample frames that the line had already processed when the event occurred,
                 *  or {#link AudioSystem#NOT_SPECIFIED}
                 * @throws IllegalArgumentException if <code>line</code> is
                 *  <code>null</code>.
                 */
                // @ts-ignore
                constructor(line: javax.sound.sampled.Line, type: javax.sound.sampled.LineEvent.Type, position: number /*long*/)
                /**
                 * Obtains the audio line that is the source of this event.
                 * @return the line responsible for this event
                 */
                // @ts-ignore
                getLine(): javax.sound.sampled.Line
                /**
                 * Obtains the event's type.
                 * @return this event's type ({#link Type#OPEN}, {@link Type#CLOSE},
                 *  {@link Type#START}, or {@link Type#STOP})
                 */
                // @ts-ignore
                getType(): javax.sound.sampled.LineEvent.Type
                /**
                 * Obtains the position in the line's audio data when the event occurred, expressed in sample frames.
                 * For example, if a source line had already played back 14 sample frames at the time it was
                 * paused, the pause event would report the line's position as 14.  The next frame to be processed
                 * would be frame number 14 using zero-based numbering, or 15 using one-based numbering.
                 * <p>
                 * Note that this field is relevant only to certain events generated by
                 * data lines, such as <code>START</code> and <code>STOP</code>.  For
                 * events generated by lines that do not count sample frames, and for any
                 * other events for which this value is not known, the position value
                 * should be {@link AudioSystem#NOT_SPECIFIED}.
                 * @return the line's position as a sample frame number
                 */
                // @ts-ignore
                getFramePosition(): long
                /**
                 * Obtains a string representation of the event.  The contents of the string may vary
                 * between implementations of Java Sound.
                 * @return a string describing the event.
                 */
                // @ts-ignore
                toString(): java.lang.String
            }
        }
    }
}
