declare namespace java {
    namespace awt {
        /**
         * The root event class for all AWT events.
         * This class and its subclasses supercede the original
         * java.awt.Event class.
         * Subclasses of this root AWTEvent class defined outside of the
         * java.awt.event package should define event ID values greater than
         * the value defined by RESERVED_ID_MAX.
         * <p>
         * The event masks defined in this class are needed by Component subclasses
         * which are using Component.enableEvents() to select for event types not
         * selected by registered listeners. If a listener is registered on a
         * component, the appropriate event mask is already set internally by the
         * component.
         * <p>
         * The masks are also used to specify to which types of events an
         * AWTEventListener should listen. The masks are bitwise-ORed together
         * and passed to Toolkit.addAWTEventListener.
         * @see Component#enableEvents
         * @see Toolkit#addAWTEventListener
         * @see java.awt.event.ActionEvent
         * @see java.awt.event.AdjustmentEvent
         * @see java.awt.event.ComponentEvent
         * @see java.awt.event.ContainerEvent
         * @see java.awt.event.FocusEvent
         * @see java.awt.event.InputMethodEvent
         * @see java.awt.event.InvocationEvent
         * @see java.awt.event.ItemEvent
         * @see java.awt.event.HierarchyEvent
         * @see java.awt.event.KeyEvent
         * @see java.awt.event.MouseEvent
         * @see java.awt.event.MouseWheelEvent
         * @see java.awt.event.PaintEvent
         * @see java.awt.event.TextEvent
         * @see java.awt.event.WindowEvent
         * @author Carl Quinn
         * @author Amy Fowler
         * @since 1.1
         */
        // @ts-ignore
        abstract class AWTEvent extends java.util.EventObject {
            /**
             * Constructs an AWTEvent object from the parameters of a 1.0-style event.
             * @param event the old-style event
             */
            // @ts-ignore
            constructor(event: java.awt.Event)
            /**
             * Constructs an AWTEvent object with the specified source object and type.
             * @param source the object where the event originated
             * @param id the event type
             */
            // @ts-ignore
            constructor(source: java.lang.Object | any, id: number /*int*/)
            /**
             * The event's id.
             * @serial 
             * @see #getID()
             * @see #AWTEvent
             */
            // @ts-ignore
            id: number /*int*/
            /**
             * Controls whether or not the event is sent back down to the peer once the
             * source has processed it - false means it's sent to the peer; true means
             * it's not. Semantic events always have a 'true' value since they were
             * generated by the peer in response to a low-level event.
             * @serial 
             * @see #consume
             * @see #isConsumed
             */
            // @ts-ignore
            consumed: boolean
            /**
             * The event mask for selecting component events.
             */
            // @ts-ignore
            public static readonly COMPONENT_EVENT_MASK: number /*long*/
            /**
             * The event mask for selecting container events.
             */
            // @ts-ignore
            public static readonly CONTAINER_EVENT_MASK: number /*long*/
            /**
             * The event mask for selecting focus events.
             */
            // @ts-ignore
            public static readonly FOCUS_EVENT_MASK: number /*long*/
            /**
             * The event mask for selecting key events.
             */
            // @ts-ignore
            public static readonly KEY_EVENT_MASK: number /*long*/
            /**
             * The event mask for selecting mouse events.
             */
            // @ts-ignore
            public static readonly MOUSE_EVENT_MASK: number /*long*/
            /**
             * The event mask for selecting mouse motion events.
             */
            // @ts-ignore
            public static readonly MOUSE_MOTION_EVENT_MASK: number /*long*/
            /**
             * The event mask for selecting window events.
             */
            // @ts-ignore
            public static readonly WINDOW_EVENT_MASK: number /*long*/
            /**
             * The event mask for selecting action events.
             */
            // @ts-ignore
            public static readonly ACTION_EVENT_MASK: number /*long*/
            /**
             * The event mask for selecting adjustment events.
             */
            // @ts-ignore
            public static readonly ADJUSTMENT_EVENT_MASK: number /*long*/
            /**
             * The event mask for selecting item events.
             */
            // @ts-ignore
            public static readonly ITEM_EVENT_MASK: number /*long*/
            /**
             * The event mask for selecting text events.
             */
            // @ts-ignore
            public static readonly TEXT_EVENT_MASK: number /*long*/
            /**
             * The event mask for selecting input method events.
             */
            // @ts-ignore
            public static readonly INPUT_METHOD_EVENT_MASK: number /*long*/
            /**
             * The event mask for selecting paint events.
             */
            // @ts-ignore
            public static readonly PAINT_EVENT_MASK: number /*long*/
            /**
             * The event mask for selecting invocation events.
             */
            // @ts-ignore
            public static readonly INVOCATION_EVENT_MASK: number /*long*/
            /**
             * The event mask for selecting hierarchy events.
             */
            // @ts-ignore
            public static readonly HIERARCHY_EVENT_MASK: number /*long*/
            /**
             * The event mask for selecting hierarchy bounds events.
             */
            // @ts-ignore
            public static readonly HIERARCHY_BOUNDS_EVENT_MASK: number /*long*/
            /**
             * The event mask for selecting mouse wheel events.
             * @since 1.4
             */
            // @ts-ignore
            public static readonly MOUSE_WHEEL_EVENT_MASK: number /*long*/
            /**
             * The event mask for selecting window state events.
             * @since 1.4
             */
            // @ts-ignore
            public static readonly WINDOW_STATE_EVENT_MASK: number /*long*/
            /**
             * The event mask for selecting window focus events.
             * @since 1.4
             */
            // @ts-ignore
            public static readonly WINDOW_FOCUS_EVENT_MASK: number /*long*/
            /**
             * The maximum value for reserved AWT event IDs. Programs defining
             * their own event IDs should use IDs greater than this value.
             */
            // @ts-ignore
            public static readonly RESERVED_ID_MAX: number /*int*/
            /**
             * Retargets an event to a new source. This method is typically used to
             * retarget an event to a lightweight child Component of the original
             * heavyweight source.
             * <p>
             * This method is intended to be used only by event targeting subsystems,
             * such as client-defined KeyboardFocusManagers. It is not for general
             * client use.
             * @param newSource the new Object to which the event should be dispatched
             * @since 1.4
             */
            // @ts-ignore
            public setSource(newSource: java.lang.Object | any): void
            /**
             * Returns the event type.
             */
            // @ts-ignore
            public getID(): number /*int*/
            /**
             * Returns a String representation of this object.
             */
            // @ts-ignore
            public toString(): string
            /**
             * Returns a string representing the state of this <code>Event</code>.
             * This method is intended to be used only for debugging purposes, and the
             * content and format of the returned string may vary between
             * implementations. The returned string may be empty but may not be
             * <code>null</code>.
             * @return a string representation of this event
             */
            // @ts-ignore
            public paramString(): string
            /**
             * Consumes this event, if this event can be consumed. Only low-level,
             * system events can be consumed
             */
            // @ts-ignore
            consume(): void
            /**
             * Returns whether this event has been consumed.
             */
            // @ts-ignore
            isConsumed(): boolean
        }
    }
}
