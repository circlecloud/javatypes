declare namespace java {
    namespace awt {
        namespace event {
            /**
             * A semantic event which indicates that an item was selected or deselected.
             * This high-level event is generated by an ItemSelectable object (such as a
             * List) when an item is selected or deselected by the user.
             * The event is passed to every <code>ItemListener</code> object which
             * registered to receive such events using the component's
             * <code>addItemListener</code> method.
             * <P>
             * The object that implements the <code>ItemListener</code> interface gets
             * this <code>ItemEvent</code> when the event occurs. The listener is
             * spared the details of processing individual mouse movements and mouse
             * clicks, and can instead process a "meaningful" (semantic) event like
             * "item selected" or "item deselected".
             * <p>
             * An unspecified behavior will be caused if the {@code id} parameter
             * of any particular {@code ItemEvent} instance is not
             * in the range from {@code ITEM_FIRST} to {@code ITEM_LAST}.
             * <p>
             * The {@code stateChange} of any {@code ItemEvent} instance takes one of the following
             * values:
             * <ul>
             * <li> {@code ItemEvent.SELECTED}
             * <li> {@code ItemEvent.DESELECTED}
             * </ul>
             * Assigning the value different from listed above will cause an unspecified behavior.
             * @author Carl Quinn
             * @see java.awt.ItemSelectable
             * @see ItemListener
             * @see <a href="https://docs.oracle.com/javase/tutorial/uiswing/events/itemlistener.html">Tutorial: Writing an Item Listener</a>
             * @since 1.1
             */
            // @ts-ignore
            class ItemEvent extends java.awt.AWTEvent {
                /**
                 * Constructs an <code>ItemEvent</code> object.
                 * <p> This method throws an
                 * <code>IllegalArgumentException</code> if <code>source</code>
                 * is <code>null</code>.
                 * @param source The <code>ItemSelectable</code> object
                 *                that originated the event
                 * @param id           The integer that identifies the event type.
                 *                      For information on allowable values, see
                 *                      the class description for {#link ItemEvent}
                 * @param item   An object -- the item affected by the event
                 * @param stateChange  An integer that indicates whether the item was
                 *                selected or deselected.
                 *                      For information on allowable values, see
                 *                      the class description for {#link ItemEvent}
                 * @throws IllegalArgumentException if <code>source</code> is null
                 * @see #getItemSelectable()
                 * @see #getID()
                 * @see #getStateChange()
                 */
                // @ts-ignore
                constructor(source: java.awt.ItemSelectable, id: number /*int*/, item: java.lang.Object | any, stateChange: number /*int*/)
                /**
                 * The first number in the range of ids used for item events.
                 */
                // @ts-ignore
                public static readonly ITEM_FIRST: number /*int*/
                /**
                 * The last number in the range of ids used for item events.
                 */
                // @ts-ignore
                public static readonly ITEM_LAST: number /*int*/
                /**
                 * This event id indicates that an item's state changed.
                 */
                // @ts-ignore
                public static readonly ITEM_STATE_CHANGED: number /*int*/
                /**
                 * This state-change value indicates that an item was selected.
                 */
                // @ts-ignore
                public static readonly SELECTED: number /*int*/
                /**
                 * This state-change-value indicates that a selected item was deselected.
                 */
                // @ts-ignore
                public static readonly DESELECTED: number /*int*/
                /**
                 * Returns the originator of the event.
                 * @return the ItemSelectable object that originated the event.
                 */
                // @ts-ignore
                public getItemSelectable(): java.awt.ItemSelectable
                /**
                 * Returns the item affected by the event.
                 * @return the item (object) that was affected by the event
                 */
                // @ts-ignore
                public getItem(): any
                /**
                 * Returns the type of state change (selected or deselected).
                 * @return an integer that indicates whether the item was selected
                 *          or deselected
                 * @see #SELECTED
                 * @see #DESELECTED
                 */
                // @ts-ignore
                public getStateChange(): number /*int*/
                /**
                 * Returns a parameter string identifying this item event.
                 * This method is useful for event-logging and for debugging.
                 * @return a string identifying the event and its attributes
                 */
                // @ts-ignore
                public paramString(): string
            }
        }
    }
}
