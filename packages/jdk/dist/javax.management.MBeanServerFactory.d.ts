declare namespace javax {
    namespace management {
        /**
         * <p>Provides MBean server references.  There are no instances of
         * this class.</p>
         * <p>Since JMX 1.2 this class makes it possible to replace the default
         * MBeanServer implementation. This is done using the
         * {@link javax.management.MBeanServerBuilder} class.
         * The class of the initial MBeanServerBuilder to be
         * instantiated can be specified through the
         * <b>javax.management.builder.initial</b> system property.
         * The specified class must be a public subclass of
         * {@link javax.management.MBeanServerBuilder}, and must have a public
         * empty constructor.
         * <p>By default, if no value for that property is specified, an instance of
         * {@link
         * javax.management.MBeanServerBuilder javax.management.MBeanServerBuilder}
         * is created. Otherwise, the MBeanServerFactory attempts to load the
         * specified class using
         * {@link java.lang.Thread#getContextClassLoader()
         * Thread.currentThread().getContextClassLoader()}, or if that is null,
         * {@link java.lang.Class#forName(java.lang.String) Class.forName()}. Then
         * it creates an initial instance of that Class using
         * {@link java.lang.Class#newInstance()}. If any checked exception
         * is raised during this process (e.g.
         * {@link java.lang.ClassNotFoundException},
         * {@link java.lang.InstantiationException}) the MBeanServerFactory
         * will propagate this exception from within a RuntimeException.</p>
         * <p>The <b>javax.management.builder.initial</b> system property is
         * consulted every time a new MBeanServer needs to be created, and the
         * class pointed to by that property is loaded. If that class is different
         * from that of the current MBeanServerBuilder, then a new MBeanServerBuilder
         * is created. Otherwise, the MBeanServerFactory may create a new
         * MBeanServerBuilder or reuse the current one.</p>
         * <p>If the class pointed to by the property cannot be
         * loaded, or does not correspond to a valid subclass of MBeanServerBuilder
         * then an exception is propagated, and no MBeanServer can be created until
         * the <b>javax.management.builder.initial</b> system property is reset to
         * valid value.</p>
         * <p>The MBeanServerBuilder makes it possible to wrap the MBeanServers
         * returned by the default MBeanServerBuilder implementation, for the purpose
         * of e.g. adding an additional security layer.</p>
         * @since 1.5
         */
        // @ts-ignore
        class MBeanServerFactory extends java.lang.Object {
            /**
             * Remove internal MBeanServerFactory references to a created
             * MBeanServer. This allows the garbage collector to remove the
             * MBeanServer object.
             * @param mbeanServer the MBeanServer object to remove.
             * @exception java.lang.IllegalArgumentException if
             *  <code>mbeanServer</code> was not generated by one of the
             *  <code>createMBeanServer</code> methods, or if
             *  <code>releaseMBeanServer</code> was already called on it.
             * @exception SecurityException if there is a SecurityManager and
             *  the caller's permissions do not include or imply <code>{#link
             *  MBeanServerPermission}("releaseMBeanServer")</code>.
             */
            // @ts-ignore
            public static releaseMBeanServer(mbeanServer: javax.management.MBeanServer): void
            /**
             * <p>Return a new object implementing the MBeanServer interface
             * with a standard default domain name.  The default domain name
             * is used as the domain part in the ObjectName of MBeans when the
             * domain is specified by the user is null.</p>
             * <p>The standard default domain name is
             * <code>DefaultDomain</code>.</p>
             * <p>The MBeanServer reference is internally kept. This will
             * allow <CODE>findMBeanServer</CODE> to return a reference to
             * this MBeanServer object.</p>
             * <p>This method is equivalent to <code>createMBeanServer(null)</code>.
             * @return the newly created MBeanServer.
             * @exception SecurityException if there is a SecurityManager and the
             *  caller's permissions do not include or imply <code>{#link
             *  MBeanServerPermission}("createMBeanServer")</code>.
             * @exception JMRuntimeException if the property
             *  <code>javax.management.builder.initial</code> exists but the
             *  class it names cannot be instantiated through a public
             *  no-argument constructor; or if the instantiated builder returns
             *  null from its {#link MBeanServerBuilder#newMBeanServerDelegate
             *  newMBeanServerDelegate} or {@link
             *  MBeanServerBuilder#newMBeanServer newMBeanServer} methods.
             * @exception ClassCastException if the property
             *  <code>javax.management.builder.initial</code> exists and can be
             *  instantiated but is not assignment compatible with {#link
             *  MBeanServerBuilder}.
             */
            // @ts-ignore
            public static createMBeanServer(): javax.management.MBeanServer
            /**
             * <p>Return a new object implementing the {@link MBeanServer}
             * interface with the specified default domain name.  The given
             * domain name is used as the domain part in the ObjectName of
             * MBeans when the domain is specified by the user is null.</p>
             * <p>The MBeanServer reference is internally kept. This will
             * allow <CODE>findMBeanServer</CODE> to return a reference to
             * this MBeanServer object.</p>
             * @param domain the default domain name for the created
             *  MBeanServer.  This is the value that will be returned by {#link
             *  MBeanServer#getDefaultDomain}.
             * @return the newly created MBeanServer.
             * @exception SecurityException if there is a SecurityManager and
             *  the caller's permissions do not include or imply <code>{#link
             *  MBeanServerPermission}("createMBeanServer")</code>.
             * @exception JMRuntimeException if the property
             *  <code>javax.management.builder.initial</code> exists but the
             *  class it names cannot be instantiated through a public
             *  no-argument constructor; or if the instantiated builder returns
             *  null from its {#link MBeanServerBuilder#newMBeanServerDelegate
             *  newMBeanServerDelegate} or {@link
             *  MBeanServerBuilder#newMBeanServer newMBeanServer} methods.
             * @exception ClassCastException if the property
             *  <code>javax.management.builder.initial</code> exists and can be
             *  instantiated but is not assignment compatible with {#link
             *  MBeanServerBuilder}.
             */
            // @ts-ignore
            public static createMBeanServer(domain: java.lang.String | string): javax.management.MBeanServer
            /**
             * <p>Return a new object implementing the MBeanServer interface
             * with a standard default domain name, without keeping an
             * internal reference to this new object.  The default domain name
             * is used as the domain part in the ObjectName of MBeans when the
             * domain is specified by the user is null.</p>
             * <p>The standard default domain name is
             * <code>DefaultDomain</code>.</p>
             * <p>No reference is kept. <CODE>findMBeanServer</CODE> will not
             * be able to return a reference to this MBeanServer object, but
             * the garbage collector will be able to remove the MBeanServer
             * object when it is no longer referenced.</p>
             * <p>This method is equivalent to <code>newMBeanServer(null)</code>.</p>
             * @return the newly created MBeanServer.
             * @exception SecurityException if there is a SecurityManager and the
             *  caller's permissions do not include or imply <code>{#link
             *  MBeanServerPermission}("newMBeanServer")</code>.
             * @exception JMRuntimeException if the property
             *  <code>javax.management.builder.initial</code> exists but the
             *  class it names cannot be instantiated through a public
             *  no-argument constructor; or if the instantiated builder returns
             *  null from its {#link MBeanServerBuilder#newMBeanServerDelegate
             *  newMBeanServerDelegate} or {@link
             *  MBeanServerBuilder#newMBeanServer newMBeanServer} methods.
             * @exception ClassCastException if the property
             *  <code>javax.management.builder.initial</code> exists and can be
             *  instantiated but is not assignment compatible with {#link
             *  MBeanServerBuilder}.
             */
            // @ts-ignore
            public static newMBeanServer(): javax.management.MBeanServer
            /**
             * <p>Return a new object implementing the MBeanServer interface
             * with the specified default domain name, without keeping an
             * internal reference to this new object.  The given domain name
             * is used as the domain part in the ObjectName of MBeans when the
             * domain is specified by the user is null.</p>
             * <p>No reference is kept. <CODE>findMBeanServer</CODE> will not
             * be able to return a reference to this MBeanServer object, but
             * the garbage collector will be able to remove the MBeanServer
             * object when it is no longer referenced.</p>
             * @param domain the default domain name for the created
             *  MBeanServer.  This is the value that will be returned by {#link
             *  MBeanServer#getDefaultDomain}.
             * @return the newly created MBeanServer.
             * @exception SecurityException if there is a SecurityManager and the
             *  caller's permissions do not include or imply <code>{#link
             *  MBeanServerPermission}("newMBeanServer")</code>.
             * @exception JMRuntimeException if the property
             *  <code>javax.management.builder.initial</code> exists but the
             *  class it names cannot be instantiated through a public
             *  no-argument constructor; or if the instantiated builder returns
             *  null from its {#link MBeanServerBuilder#newMBeanServerDelegate
             *  newMBeanServerDelegate} or {@link
             *  MBeanServerBuilder#newMBeanServer newMBeanServer} methods.
             * @exception ClassCastException if the property
             *  <code>javax.management.builder.initial</code> exists and can be
             *  instantiated but is not assignment compatible with {#link
             *  MBeanServerBuilder}.
             */
            // @ts-ignore
            public static newMBeanServer(domain: java.lang.String | string): javax.management.MBeanServer
            /**
             * <p>Return a list of registered MBeanServer objects.  A
             * registered MBeanServer object is one that was created by one of
             * the <code>createMBeanServer</code> methods and not subsequently
             * released with <code>releaseMBeanServer</code>.</p>
             * @param agentId The agent identifier of the MBeanServer to
             *  retrieve.  If this parameter is null, all registered
             *  MBeanServers in this JVM are returned.  Otherwise, only
             *  MBeanServers whose id is equal to <code>agentId</code> are
             *  returned.  The id of an MBeanServer is the
             *  <code>MBeanServerId</code> attribute of its delegate MBean.
             * @return A list of MBeanServer objects.
             * @exception SecurityException if there is a SecurityManager and the
             *  caller's permissions do not include or imply <code>{#link
             *  MBeanServerPermission}("findMBeanServer")</code>.
             */
            // @ts-ignore
            public static findMBeanServer(agentId: java.lang.String | string): java.util.ArrayList<javax.management.MBeanServer>
            /**
             * Return the ClassLoaderRepository used by the given MBeanServer.
             * This method is equivalent to {@link
             * MBeanServer#getClassLoaderRepository() server.getClassLoaderRepository()}.
             * @param server The MBeanServer under examination. Since JMX 1.2,
             *  if <code>server</code> is <code>null</code>, the result is a
             *  {#link NullPointerException}.  This behavior differs from what
             *  was implemented in JMX 1.1 - where the possibility to use
             *  <code>null</code> was deprecated.
             * @return The Class Loader Repository used by the given MBeanServer.
             * @exception SecurityException if there is a SecurityManager and
             *  the caller's permissions do not include or imply <code>{#link
             *  MBeanPermission}("getClassLoaderRepository")</code>.
             * @exception NullPointerException if <code>server</code> is null.
             */
            // @ts-ignore
            public static getClassLoaderRepository(server: javax.management.MBeanServer): javax.management.loading.ClassLoaderRepository
        }
    }
}
