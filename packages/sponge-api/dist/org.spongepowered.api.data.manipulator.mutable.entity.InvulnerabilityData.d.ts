declare namespace org {
    namespace spongepowered {
        namespace api {
            namespace data {
                namespace manipulator {
                    namespace mutable {
                        namespace entity {
                            /**
                             * A {@link DataManipulator} for the invulnerability an {@link Entity} can have
                             * such that any "damage" occurring while the {@link Entity} is "invulnerable"
                             * will not actually "damage" the {@link Entity}.
                             */
                            // @ts-ignore
                            interface InvulnerabilityData extends org.spongepowered.api.data.manipulator.DataManipulator<org.spongepowered.api.data.manipulator.mutable.entity.InvulnerabilityData, org.spongepowered.api.data.manipulator.immutable.entity.ImmutableInvulnerabilityData> {
                                /**
                                 * Gets the {@link MutableBoundedValue} for the amount of "ticks" of
                                 * "invulnerability" an entity has because of being hurt recently.
                                 * @return The value for the amount of ticks of invulnerability
                                 * @see Keys#INVULNERABILITY_TICKS
                                 */
                                // @ts-ignore
                                invulnerableTicks(): org.spongepowered.api.data.value.mutable.MutableBoundedValue<java.lang.Integer>
                                /**
                                 * Gets the boolean {@link Value} which represents if an entity is
                                 * invulnerable from most damage sources besides <b>besides</b> the void,
                                 * players in creative mode, and manual killing like the /kill command.
                                 * <p>This does not cover creative mode, where players can also
                                 * be invulnerable.</p>
                                 * @return The boolean value for whether or not the entity is invulnerable
                                 * @see Keys#INVULNERABLE
                                 */
                                // @ts-ignore
                                invulnerable(): org.spongepowered.api.data.value.mutable.Value<java.lang.Boolean>
                            }
                        }
                    }
                }
            }
        }
    }
}
