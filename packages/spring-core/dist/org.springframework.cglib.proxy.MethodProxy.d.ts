declare namespace org {
    namespace springframework {
        namespace cglib {
            namespace proxy {
                /**
                 * Classes generated by {@link Enhancer} pass this object to the
                 * registered {@link MethodInterceptor} objects when an intercepted method is invoked. It can
                 * be used to either invoke the original method, or call the same method on a different
                 * object of the same type.
                 * @version $Id: MethodProxy.java,v 1.16 2009/01/11 20:09:48 herbyderby Exp $
                 */
                // @ts-ignore
                class MethodProxy extends java.lang.Object {
                    /**
                     * For internal use by {@link Enhancer} only; see the {@link org.springframework.cglib.reflect.FastMethod} class
                     * for similar functionality.
                     */
                    // @ts-ignore
                    create(c1: java.lang.Class, c2: java.lang.Class, desc: string, name1: string, name2: string): org.springframework.cglib.proxy.MethodProxy
                    /**
                     * Return the signature of the proxied method.
                     */
                    // @ts-ignore
                    getSignature(): Signature
                    /**
                     * Return the name of the synthetic method created by CGLIB which is
                     * used by {@link #invokeSuper} to invoke the superclass
                     * (non-intercepted) method implementation. The parameter types are
                     * the same as the proxied method.
                     */
                    // @ts-ignore
                    getSuperName(): java.lang.String
                    /**
                     * Return the {@link org.springframework.cglib.reflect.FastClass} method index
                     * for the method used by {@link #invokeSuper}. This index uniquely
                     * identifies the method within the generated proxy, and therefore
                     * can be useful to reference external metadata.
                     * @see #getSuperName
                     */
                    // @ts-ignore
                    getSuperIndex(): int
                    /**
                     * Return the <code>MethodProxy</code> used when intercepting the method
                     * matching the given signature.
                     * @param type the class generated by Enhancer
                     * @param sig the signature to match
                     * @return the MethodProxy instance, or null if no applicable matching method is found
                     * @throws IllegalArgumentException if the Class was not created by Enhancer or does not use a MethodInterceptor
                     */
                    // @ts-ignore
                    find(type: java.lang.Class, sig: Signature): org.springframework.cglib.proxy.MethodProxy
                    /**
                     * Invoke the original method, on a different object of the same type.
                     * @param obj the compatible object; recursion will result if you use the object passed as the first
                     *  argument to the MethodInterceptor (usually not what you want)
                     * @param args the arguments passed to the intercepted method; you may substitute a different
                     *  argument array as long as the types are compatible
                     * @throws Throwable the bare exceptions thrown by the called method are passed through
                     *  without wrapping in an <code>InvocationTargetException</code>
                     * @see MethodInterceptor#intercept
                     */
                    // @ts-ignore
                    invoke(obj: any, args: any[]): java.lang.Object
                    /**
                     * Invoke the original (super) method on the specified object.
                     * @param obj the enhanced object, must be the object passed as the first
                     *  argument to the MethodInterceptor
                     * @param args the arguments passed to the intercepted method; you may substitute a different
                     *  argument array as long as the types are compatible
                     * @throws Throwable the bare exceptions thrown by the called method are passed through
                     *  without wrapping in an <code>InvocationTargetException</code>
                     * @see MethodInterceptor#intercept
                     */
                    // @ts-ignore
                    invokeSuper(obj: any, args: any[]): java.lang.Object
                }
            }
        }
    }
}
